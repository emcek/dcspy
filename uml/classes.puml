@startuml
hide empty members

package dcsbios {
    class ProtocolParser {
        + state : str
        + sync_byte_count : int
        + address : int
        + count : int
        + data : int
        + write_callbacks : Set[Callable]
        + frame_sync_callbacks : Set[Callable]
        + process_byte(byte: int)
    }

    class StringBuffer {
        + buffer : bytearray
        + callbacks: Set[Callable]
        + __init__(parser, address, max_length, callback)
        + set_char(index, char)
        + on_dcsbios_write(address, data)
    }

    class IntegerBuffer {
        + callbacks: Set[Callable]
        + __init__(parser, address, mask, shift_by, callback)
        + on_dcsbios_write(address, data)
    }
}

package logitech {
    LogitechKeyboard <|-- KeyboardMono
    LogitechKeyboard <|-- KeyboardColor
}

class LogitechKeyboard {
    + parser : ProtocolParser
    + plane : Aircraft
    + plane_name = '' : str
    + plane_detected = False : bool
    + already_pressed = False : bool
    + buttons : Tuple[int]
    + lcd : LcdInfo
    + dislay(message : List[str]) -> List[str]
    # {abstract} _prepare_image() -> Image
    + detecting_plane()
    + load_new_plane(value : str)
    + check_buttons() -> int
    + button_handle(sock : socket)
    + clear()
    + text(List[str])
}

class KeyboardMono {
    + buttons : Tuple[int]
    # _prepare_image() -> Image
}

class KeyboardColor {
    + buttons : Tuple[int]
    # _prepare_image() -> Image
}

package aircraft {
  Aircraft <|-- FA18Chornet
  Aircraft <|-- F16C50
  Aircraft <|-- Ka50
  Aircraft <|-- A10C
  A10C <|-- A10C2
  Aircraft <|-- F14B
  Aircraft <|-- AV8BNA
  class BIOS_VALUE
}

class Aircraft {
    + bios_data : Dict[str, BIOS_VALUE]
    + cycle_buttons : Dict[str, Iterator[int]]
    + lcd : LcdInfo
    # _debug_img : Iterator[int]
    + __init__(lcd_type: LcdInfo)
    + button_request(button: int, request: str) -> str
    + update_display(image : Image)
    + prepare_image() -> Image
    + set_bios(selector: str, value: str)
    + get_bios(selector: str) -> Union[str, int]
    + get_next_value_for_button(btn_name: str) -> int
    + {abstract} draw_for_lcd_type_1(img: Image)
    + {abstract} draw_for_lcd_type_2(img: Image)
}

class BIOS_VALUE <<(T,orange)>> {
    + class : str
    + args: Dict[str, int]
    + value: Union[int, str]
    + max_value: int
    - total=False
}

class LcdInfo <<(D,orchid)>> {
    + height : int
    + width : int
    + type : int
    + foreground : Union[int, Sequence[int]]
    + background : Union[int, Sequence[int]]
    + mode: str
    + font_s: ImageFont.FreeTypeFont
    + font_l: ImageFont.FreeTypeFont
}

package sdk{
    class lcd_sdk <<(L,lightblue)>> {
        + logi_lcd_init()
        + logi_lcd_is_connected()
        + logi_lcd_is_button_pressed()
        + logi_lcd_update()
        + logi_lcd_shutdown()
        + logi_lcd_mono_set_background()
        + logi_lcd_mono_set_text()
        + logi_lcd_color_set_background()
        + logi_lcd_color_set_title()
        + logi_lcd_color_set_text()
        + update_text()
        + update_display()
        + clear_display()
        # _clear_mono()
        # _clear_color()
    }
    class led_sdk <<(L,lightblue)>> {
        + logi_led_init()
        + logi_led_init_with_name()
        + logi_led_set_target_device()
        + logi_led_save_current_lighting()
        + logi_led_restore_lighting()
        + logi_led_set_lighting()
        + logi_led_flash_lighting()
        + logi_led_pulse_lighting()
        + logi_led_stop_effects()
        + logi_led_shutdown()
        + start_led_pulse()
    }
}

LogitechKeyboard *- Aircraft
LcdInfo -* LogitechKeyboard
LogitechKeyboard *--- ProtocolParser
LogitechKeyboard *-- lcd_sdk

KeyboardMono *-- lcd_sdk
KeyboardColor *-- lcd_sdk

LcdInfo -* Aircraft
Aircraft *-- StringBuffer
Aircraft *-- IntegerBuffer
Aircraft *-- lcd_sdk
@enduml