@startuml
hide empty members

package dcsbios {
    class ProtocolParser {
        + state : str
        + sync_byte_count : int
        + address : int
        + count : int
        + data : int
        + write_callbacks : Set[Callable]
        + frame_sync_callbacks : Set[Callable]
        + process_byte(byte: int)
    }
    class StringBuffer {
        + buffer : bytearray
        + callbacks: Set[Callable]
        + __init__(parser, address, max_length, callback)
        + set_char(index, char)
        + on_dcsbios_write(address, data)
    }
    class IntegerBuffer {
        + callbacks: Set[Callable]
        + __init__(parser, address, mask, shift_by, callback)
        + on_dcsbios_write(address, data)
    }
    class ParserState <<(E,yellow)>> {
        ADDRESS_LOW = 1
        ADDRESS_HIGH = 2
        COUNT_LOW = 3
        COUNT_HIGH = 4
        DATA_LOW = 5
        DATA_HIGH = 6
        WAIT_FOR_SYNC = 7
    }
    ProtocolParser *- ParserState
}

package logitech {
    KeyboardManager <|-- G13
    KeyboardManager <|-- G510
    KeyboardManager <|-- G15v1
    KeyboardManager <|-- G15v2
    KeyboardManager <|-- G19

    class KeyboardManager {
        + parser : ProtocolParser
        + plane : BasicAircraft
        + plane_name = '' : str
        + bios_name = '' : str
        + socket: socket
        + plane_detected = False : bool
        + lcdbutton_pressed = False : bool
        + gkey: Sequence[Gkey]
        + buttons: Sequence[LcdButton]
        + lcd : LcdInfo
        + model: KeyboardModel
        + vert_space = 0 : int
        + __init__(parser: ProtocolParser)
        + display(message : List[str]) -> List[str]
        + detecting_plane()
        + load_new_plane(value : str)
        + check_buttons() -> LcdButton
        + button_handle()
        + key_sdk: GkeySdkManager
        + gkey_callback_handler(key: int, mode: int, key_down: int)
        + clear()
        + text(List[str])
        # _prepare_image() -> Image
        # _send_request(button: Union[LcdButton, Gkey], Optional[int])
    }
    class G13 {
        + gkey: Sequence[Gkey]
        + buttons: Sequence[LcdButton]
        + vert_space = 10 : int
    }
    class G510 {
        + gkey: Sequence[Gkey]
        + buttons: Sequence[LcdButton]
        + vert_space = 10 : int
    }
    class G15v1 {
        + gkey: Sequence[Gkey]
        + buttons: Sequence[LcdButton]
        + vert_space = 10 : int
    }
    class G15v2 {
        + gkey: Sequence[Gkey]
        + buttons: Sequence[LcdButton]
        + vert_space = 10 : int
    }
    class G19 {
        + gkey: Sequence[Gkey]
        + buttons: Sequence[LcdButton]
        + vert_space = 40 : int
    }
}

package aircraft {
    BasicAircraft <|-- AdvancedAircraft
    AdvancedAircraft <|-- FA18Chornet
    AdvancedAircraft <|-- F16C50
    AdvancedAircraft <|-- F15ESE
    AdvancedAircraft <|-- Ka50
    Ka50 <|-- Ka503
    AdvancedAircraft <|-- Mi8MT
    AdvancedAircraft <|-- Mi24P
    AdvancedAircraft <|-- AH64D
    AdvancedAircraft <|-- A10C
    A10C <|-- A10C2
    AdvancedAircraft <|-- F14B
    F14B <|-- F14A135GR
    AdvancedAircraft <|-- AV8BNA
    AH64D *-- ApacheEufdMode

    class MetaAircraft <<(M,plum)>> {
        + __new__(name, bases, namespace)
        + __call__()
    }
    class BasicAircraft {
        + bios_data : Dict[str, BiosValue]
        + key_req: KeyRequest
        + lcd : LcdInfo
        + cfg: Dict[str, Union[str, int]]
        + __init__(lcd_type: LcdInfo)
        + button_request(button: Union[LcdButton, Gkey]) -> RequestModel
        + set_bios(selector: str, value: Union[str, int])
        + get_bios(selector: str) -> Union[str, int]
    }
    class AdvancedAircraft {
        # _debug_img : Iterator[int]
        + prepare_image() -> Image
        + {abstract} draw_for_lcd_mono(img: Image)
        + {abstract} draw_for_lcd_color(img: Image)
    }
    class ApacheEufdMode <<(E,yellow)>> {
        + UNK = 0
        + IDM = 1
        + WCA = 2
        + PRE = 4
    }
}

package utils {
    class KeyRequest {
        + buttons: Dict[Union[LcdButton, Gkey], RequestModel] = {}
        + cycle_button_ctrl_name() -> Dict[str, int]
        + get_request(Union[LcdButton, Gkey]) -> RequestModel
        + set_request(Union[LcdButton, Gkey], str)
    }
    KeyRequest -* BasicAircraft
}

package models {
    class Direction <<(E,yellow)>> {
        + FORWARD = 1
        + BACKWARD = -1
    }
    class ZigZagIterator {
        + current: int
        + max_value: int
        + step: int = 1
    }
    class CycleButton <<(M,orange)>> {
        + ctrl_name: str
        + max_value: int = 1
        + iter: Iterator[int]
        + from_request(req: str) -> CycleButton
    }
    class LcdInfo <<(M,orange)>> {
        + height : int
        + width : int
        + type : LcdType
        + buttons: Sequence[LcdButton]
        + foreground : Union[int, Tuple[int, int, int, int]]
        + background : Union[int, Tuple[int, int, int, int]]
        + mode: LcdMode
        + font_xs: ImageFont.FreeTypeFont
        + font_s: ImageFont.FreeTypeFont
        + font_l: ImageFont.FreeTypeFont
    }
    class LcdMode <<(E,yellow)>> {
        + BLACK_WHITE = '1'
        + TRUE_COLOR = 'RGBA'
    }
    class LcdType <<(E,yellow)>> {
        + mono = 0
        + color = 1
    }
    class Gkey <<(M,orange)>> {
        + key: int
        + mode: int
        + from_yaml(yaml_str: str) -> Gkey
        + generate(key: int, mode: int) -> Tuple[Gkey]
        + name(row: int, col: int) -> str
    }
    class LcdButton <<(E,yellow)>> {
        + none = 0x0
        + one = 0x1
        + two = 0x2
        + three = 0x4
        + four = 0x8
        + left = 0x0100
        + right = 0x0200
        + ok = 0x0400
        + cancel = 0x0800
        + up = 0x1000
        + down = 0x2000
        + menu = 0x4000
    }
    class IntBuffArgs <<(M,orange)>> {
        + address: int
        + mask: int
        + shift_by: int
    }
    class StrBuffArgs <<(M,orange)>> {
        + address: int
        + max_length: int
    }
    class BiosValueInt <<(M,orange)>> {
        + klass : str
        + args: IntBuffArgs]
        + value: Union[int, str]
        + max_value: int
    }
    class BiosValueStr <<(M,orange)>> {
        + klass : str
        + args: StrBuffArgs
        + value: Union[int, str]
    }
    class KeyboardModel <<(M,orange)>> {
        + name: str
        + klass: str
        + modes: int
        + gkeys: int
        + lcdkeys: Sequence[LcdButton]
        + lcd: str
    }
    class PhysicalVariant <<(E,yellow)>> {
        PUSH_BUTTON = 'push_button'
        TOGGLE_SWITCH = 'toggle_switch'
        THREE_POSITION_SWITCH = '3_position_switch'
        INFINITE_ROTARY = 'infinite_rotary'
        LIMITED_ROTARY = 'limited_rotary'
        ROCKER_SWITCH = 'rocker_switch'
        BUTTON_LIGHT = 'button_light'
        EMPTY = ''
    }
    class RequestModel{
        + ctrl_name: str
        + raw_request: str
        + get_bios_fn: Callable[[str], Union[str, int, float]]
        + cycle: CycleButton = CycleButton(ctrl_name='', step=0, max_value=0)
        + from_request(str, Callable[[str], Union[str, int, float]]) -> RequestModel
        + empty(Union[LcdButton, Gkey]) -> RequestModel
        + is_cycle -> bool
        + is_custom -> bool
        + is_push_button -> bool
        # _get_next_value_for_button(button: LcdButton) -> int
        + bytes_requests(Optional[int]) -> List[bytes]:
    }
    class ControlDepiction {
        + name: str
        + description: str
        + physical_variant: PhysicalVariant
    }
    class ControlKeyData {
        + name: str
        + description: str
        + max_value: int
        + suggested_step: int
        + list_dict: List[Union[FixedStep, VariableStep, SetState, Action, SetString]]
        + physical_variant: PhysicalVariant
        + from_control(Control) -> ControlKeyData
        # _get_max_value(List[Union[FixedStep, VariableStep, SetState, Action, SetString]]) -> int
        + depiction() -> ControlDepiction
        + input_len() -> int
        + one_input() -> bool
        + has_fixed_step() -> bool
        + has_variable_step() -> bool
        + has_set_state() -> bool
        + has_action() -> bool
        + has_set_string() -> bool
        + is_push_button() -> bool
    }
    class Control {
        + api_variant: Optional[str]
        + category: str
        + control_type: str
        + description: str
        + identifier: str
        + inputs: List[Union[FixedStep, VariableStep, SetState, Action, SetString]]
        + momentary_positions: Optional[str]
        + outputs: List[Union[OutputStr, OutputInt]]
        + physical_variant: PhysicalVariant = PhysicalVariant.EMPTY
        + input() -> ControlKeyData
        + output() -> Union[BiosValueInt, BiosValueStr]
    }

BiosValueInt *-- IntBuffArgs
BiosValueStr *-- StrBuffArgs

LcdType --* LcdInfo
LcdMode --* LcdInfo
LcdButton -* LcdInfo
LcdButton -* BasicAircraft
LcdButton -* KeyboardModel
LcdButton -* KeyboardManager
Gkey --* BasicAircraft
Gkey --* KeyboardManager
Direction --* ZigZagIterator
ZigZagIterator --* RequestModel
KeyboardModel -* KeyboardManager
RequestModel --* KeyRequest
CycleButton -* RequestModel
PhysicalVariant --* ControlDepiction
PhysicalVariant --*  ControlKeyData
PhysicalVariant --* Control
}
package sdk{
    class lcd_sdk <<(L,lightblue)>> {
        + logi_lcd_init()
        + logi_lcd_is_connected()
        + logi_lcd_is_button_pressed()
        + logi_lcd_update()
        + logi_lcd_shutdown()
        + logi_lcd_mono_set_background()
        + logi_lcd_mono_set_text()
        + logi_lcd_color_set_background()
        + logi_lcd_color_set_title()
        + logi_lcd_color_set_text()
        + update_text()
        + update_display()
        + clear_display()
        # _clear_mono()
        # _clear_color()
    }
    class led_sdk <<(L,lightblue)>> {
        + logi_led_init()
        + logi_led_init_with_name()
        + logi_led_set_target_device()
        + logi_led_save_current_lighting()
        + logi_led_restore_lighting()
        + logi_led_set_lighting()
        + logi_led_flash_lighting()
        + logi_led_pulse_lighting()
        + logi_led_stop_effects()
        + logi_led_shutdown()
        + start_led_pulse()
    }
    class GkeySdkManager <<(L,lightblue)>> {
        + KEY_DLL: CDLL
        + gkey_context: LogiGkeyCBContext
        + user_callback: Callable[[int, int, int], None]
        + gkey_context_ptr: pointer[gkey_contex]
        + logi_gkey_init()
        + logi_gkey_is_keyboard_gkey_pressed()
        + logi_gkey_is_keyboard_gkey_string()
        + logi_gkey_shutdown()
    }
    class GkeyCode <<(S,pink)>> {
        + keyIdx: c_uint
        + keyDown: c_uint
        + mState: c_uint
        + mouse: c_uint
        + reserved1: c_uint
        + reserved2: c_uint
    }
    class LogiGkeyCBContext <<(S,pink)>> {
        + gkeyCallBack: GKEY_CALLBACK
        + gkeyContext: c_void_p
    }
}

KeyboardManager *- BasicAircraft
LcdInfo -* KeyboardManager
KeyboardManager *--- ProtocolParser
KeyboardManager *-- lcd_sdk
KeyboardManager *-- GkeySdkManager

LcdInfo --* BasicAircraft
BasicAircraft *-- StringBuffer
BasicAircraft *--- IntegerBuffer
BasicAircraft *-- lcd_sdk
@enduml
